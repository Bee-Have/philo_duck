there is a number of philosopher x
each philosopher has an id from 0 to (x - 1)
there is the same number of philo and forks
each philo must :
	1- eat
	2- sleep
	3- think
	4- repeat
in that order and until one of them dies

for each philo x
	instantiate pthread

each philo should have :
	- int id
	- pthread : which param : function to eat
	- a time in miliseconds, to detemine if he took to long to make an action

mutexs (forks)
	there is an array of mutexs
	this array is x long (number of philosophs)
	every time a philosopher takes a fork, he locks the mutex
each philo will be : 
	- righthanded if even id
	- lefthanded if odd id


how to establish time in miliseconds
setup lib time.h
get time at begining of function/action
for each action, do : current time - time at begining

for time, use tm_sec to get the time in seconds

the parent of the threads needs to be alive until threads "finish"


!!!!!! USLEEP !!!!!!!

make functions for routine :
	- eat
	- sleep

make prints in ms in all function for all required prints


!!!!!!!!!!!!!!!!!!!!!!! MUTEX !!!!!!!!!!!!!!!!!!!!!!!!!!!

start mutex in main
destroy mutex at the end of main

after starting mutex
lock it every time someone access specific variable, unlock it at the end of function

one mutex for fork

array of forks
each time philo enter:
	if (even id)
		-try to lock id philo 
		-try to lock id philo + 1
	if (odd id)
		-try to lock id philo + 1
		-try to lock id philo 


ok so :
datarace can happen on read (i guess ?)

mutex lock for death (all threads are trying to access "death", need to mutex it)

add mutex for start_time ?
add mutex for last meal ?
change mutex lock position for death (all threads must lock death upon reading)
add check every time a mutex is locked and/or unlocked


